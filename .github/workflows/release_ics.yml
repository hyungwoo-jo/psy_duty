name: Release ICS to Pages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g., ics-2025-10-v3)"
        required: false

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Parse tag to month/version (if matches)
        id: parse
        run: |
          TAG="${{ github.event.release.tag_name }}"
          # Expect tags like: ics-YYYY-MM-vN or vN-suffix (e.g., ics-2025-10-v3, ics-2025-10-v4a)
          if [[ "$TAG" =~ ^ics-([0-9]{4}-[0-9]{2})-(v[0-9A-Za-z._-]+)$ ]]; then
            echo "month=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "version=${BASH_REMATCH[2]}" >> $GITHUB_OUTPUT
          fi
      - name: Download ICS ZIP (by tag assets or direct URL)
        id: dlzip
        env:
          REL_TAG: ${{ inputs.tag != '' && inputs.tag || github.event.release.tag_name }}
        run: |
          set -euo pipefail
          ZIPFILE=""
          # Try download from release assets (pattern *.zip)
          tries=0
          while [[ $tries -lt 24 ]]; do
            if gh release download "$REL_TAG" --pattern "*.zip" --dir . --clobber 2>/dev/null; then
              break
            fi
            tries=$((tries+1))
            echo "Waiting for ZIP asset to appear ($tries/24)…" >&2
            sleep 5
          done
          if ls -1 *.zip >/dev/null 2>&1; then
            ZIPFILE=$(ls -t *.zip | head -n1)
          elif [[ -n "${{ inputs.zip_url }}" ]]; then
            echo "Downloading ZIP from manual url: ${{ inputs.zip_url }}" >&2
            curl -L "${{ inputs.zip_url }}" -o ics.zip
            ZIPFILE=ics.zip
          else
            echo "No ZIP asset found and no zip_url provided" >&2
            exit 3
          fi
          echo "zip=$ZIPFILE" >> $GITHUB_OUTPUT

      - name: Derive month/version from asset name if needed
        id: derive
        run: |
          M="${{ steps.parse.outputs.month }}"
          V="${{ steps.parse.outputs.version }}"
          NAME="${{ steps.dlzip.outputs.zip }}"
          if [[ -z "$M" || -z "$V" ]]; then
            # Accept names like duty-roster-YYYY-MM-vN.zip or ...-vNfoo.zip
            if [[ "$NAME" =~ ([0-9]{4}-[0-9]{2})-(v[0-9A-Za-z._-]+) ]]; then
              M="${BASH_REMATCH[1]}"; V="${BASH_REMATCH[2]}"
            else
              echo "Failed to derive month/version from tag or asset name ($NAME)" >&2
              exit 5
            fi
          fi
          echo "month=$M" >> $GITHUB_OUTPUT
          echo "version=$V" >> $GITHUB_OUTPUT

      - name: Find Excel asset (optional)
        id: xls
        env:
          REL_TAG: ${{ inputs.tag != '' && inputs.tag || github.event.release.tag_name }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          if gh release download "$REL_TAG" --pattern "*.xls*" --dir . --clobber 2>/dev/null; then
            NAME=$(ls -t *.xls* | head -n1)
            echo "name=$NAME" >> $GITHUB_OUTPUT
          else
            echo "name=" >> $GITHUB_OUTPUT
          fi

      - name: Download Excel (optional via URL)
        if: steps.xls.outputs.name == '' && inputs.xls_url != ''
        run: |
          set -euo pipefail
          curl -L "${{ inputs.xls_url }}" -o roster.xls
          ls -l roster.xls || true

      - name: Unzip to versioned folder
        run: |
          set -euo pipefail
          OUT_DIR="ics/${{ steps.derive.outputs.month }}/${{ steps.derive.outputs.version }}"
          test -d "$OUT_DIR" && { echo "Target exists: $OUT_DIR" >&2; exit 4; } || true
          mkdir -p "$OUT_DIR"
          unzip -o "${{ steps.dlzip.outputs.zip }}" -d "$OUT_DIR"
          XLS_LOCAL="${{ steps.xls.outputs.name }}"
          if [ -z "$XLS_LOCAL" ] && [ -f roster.xls ]; then XLS_LOCAL=roster.xls; fi
          if [ -n "$XLS_LOCAL" ] && [ -f "$XLS_LOCAL" ]; then
            cp -f roster.xls "$OUT_DIR/"
          fi
          # Build simple index.html
          {
            echo '<!doctype html>'
            echo '<meta charset="utf-8">'
            echo "<title>ICS ${{ steps.derive.outputs.month }} ${{ steps.derive.outputs.version }}</title>"
            echo '<style>body{font-family:system-ui,Segoe UI,Roboto,Helvetica,Arial;max-width:800px;margin:20px auto;padding:0 12px} a{color:#0366d6;text-decoration:none} ul{line-height:1.9} code{background:#f6f8fa;padding:2px 4px;border-radius:4px}</style>'
            echo "<h1>ICS ${{ steps.derive.outputs.month }} ${{ steps.derive.outputs.version }}</h1>"
            echo '<ul>'
            for f in "$OUT_DIR"/*.ics; do
              bn=$(basename "$f")
              esc=$(printf '%s' "$bn" | sed 's/&/&amp;/g; s/</&lt;/g; s/>/&gt;/g')
              echo "<li><a href=\"./$esc\">$esc</a></li>"
            done
            echo '</ul>'
          } >"$OUT_DIR/index.html"
          # Update month redirect to latest (this release)
          MONTH_DIR="ics/${{ steps.derive.outputs.month }}"
          mkdir -p "$MONTH_DIR"
          printf '%s\n' '<!doctype html>' '<meta charset="utf-8">' \
            "<meta http-equiv=\"refresh\" content=\"0; url=./${{ steps.derive.outputs.version }}/\">" \
            "<title>${{ steps.derive.outputs.month }} ICS redirect</title>" \
            "<p>Redirecting to ${{ steps.derive.outputs.version }} … <a href=\"./${{ steps.derive.outputs.version }}/\">click here</a></p>" \
            >"$MONTH_DIR/index.html"

      - name: Commit and push
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add -A ics
          git commit -m "ci(release): publish ${{ steps.parse.outputs.month }} ${{ steps.parse.outputs.version }} from release asset ${{ steps.asset.outputs.asset_name }}" || true
          git push origin HEAD:${{ github.ref_name == 'refs/heads/main' && 'main' || 'main' }}
